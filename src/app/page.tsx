// "use client";

// import { useState } from "react";
// import newsData from "@/data/news.json";
// import css from "./page.module.css"; // –º–æ–∂–Ω–∞ –∞–±–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π CSS
// import Modal from "@/components/Modal/Modal";
// import Hero from "@/components/Hero/Hero";

// export default function NewsPage() {
//   const [visibleCount, setVisibleCount] = useState(5);
//   const [expanded, setExpanded] = useState<Record<string, boolean>>({});
//   const [modalImage, setModalImage] = useState<string | null>(null);
//   const [carouselIndex, setCarouselIndex] = useState<Record<string, number>>({});

//   const reversedData = [...newsData].reverse().slice(0, visibleCount);

//   const handleLoadMore = () => setVisibleCount((prev) => prev + 5);

//   const toggleReadMore = (id: string) => {
//     setExpanded((prev) => ({ ...prev, [id]: !prev[id] }));
//   };

//   const handleImageClick = (src: string) => setModalImage(src);
//   const closeModal = () => setModalImage(null);

//   const handlePrev = (id: string, imagesLength: number) => {
//     setCarouselIndex((prev) => ({
//       ...prev,
//       [id]: (prev[id] > 0 ? prev[id] : imagesLength) - 1,
//     }));
//   };

//   const handleNext = (id: string, imagesLength: number) => {
//     setCarouselIndex((prev) => ({
//       ...prev,
//       [id]: (prev[id] + 1 || 1) % imagesLength,
//     }));
//   };

//   return (
//     <div className="container">
//       <section className={css.section}>
//         <Hero />

//         <p className={css.advertisement}>
//           –°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É! –î–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∞–¥–æ, –Ω–∞—à—ñ –∑–∞—Ö–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –≥–æ—Å—Ç—Ä—É
//           –ø–æ—Ç—Ä–µ–±—É –≤ –∑–∞—Å–æ–±–∞—Ö –≥—ñ–≥—ñ—î–Ω–∏ (–≤–æ–ª–æ–≥—ñ —Å–µ—Ä–≤–µ—Ç–∫–∏, —Å—É—Ö–∏–π –¥—É—à —Ç–∞ —ñ–Ω.), –ø—Ä–æ—à—É
//           –¥–æ–ª—É—á—ñ—Ç—å—Å—è –¥–æ –¥–æ–±—Ä–æ—ó —Å–ø—Ä–∞–≤–∏, –ø—Ä–∏–Ω–æ—Å—å—Ç–µ –¥–æ —Ü–µ—Ä–∫–≤–∏. –©–∏—Ä–æ –¥—è–∫—É—é –∑–∞ –≤–∞—à—É
//           –¥–æ–ø–æ–º–æ–≥—É.
//         </p>
//         <p className={css.advertisement}>
//           –î–æ—Ä–æ–≥—ñ –±—Ä–∞—Ç—Ç—è —ñ —Å–µ—Å—Ç—Ä–∏, –∑–±–∏—Ä–∞—î–º–æ –ø–æ–±—É—Ç–æ–≤—ñ –≥–∞–∑–æ–≤—ñ –±–∞–ª–æ–Ω–∏ –±/—É –¥–ª—è
//           –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –æ–±—ñ–≥—Ä—ñ–≤–∞—á—ñ–≤ –Ω–∞ –¥—Ä–æ–≤–∞—Ö (–±—É—Ä–∂—É–π–æ–∫). –î–ª—è –Ω–∞—à–∏—Ö –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤.
//         </p>
//         <p className={css.advertisement}>
//           –ù–µ –∑–∞–±—É–≤–∞–π–º–æ –ø—Ä–æ –Ω–∞—à–∏—Ö –º—É–∂–Ω—ñ—Ö –≤–æ—ó–Ω—ñ–≤, —è–∫—ñ –≤—ñ–¥–¥–∞—é—Ç—å –∑–∞ –Ω–∞—Å —Å–≤–æ—î –∂–∏—Ç—Ç—è.
//           –ó–∞—Ä–∞–∑ —î –≥–æ—Å—Ç—Ä–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —É —Ä–µ—á–∞—Ö: –∫–æ–≤–¥—Ä–∏, –ø–æ–¥—É—à–∫–∏, –ø—Ä–æ—Å—Ç–∏–Ω—ñ,
//           –ø—ñ–¥–æ–¥—ñ—è–ª—å–Ω–∏–∫–∏, —à–∫–∞—Ä–ø–µ—Ç–∫–∏, —Å–ø—ñ–¥–Ω—è –±—ñ–ª–∏–∑–Ω–∞ ‚Äî —É—Å–µ —á–∏—Å—Ç–µ. –ü—É–Ω–∫—Ç –∑–±–æ—Ä—É –≤–∏
//           –∑–Ω–∞—î—Ç–µ. –ù–µ—Ö–∞–π –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç—å!
//         </p>
//         <p className={css.advertisement}>
//           –ü–æ—Ç—Ä—ñ–±–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–≤–µ—Ä–¥–æ–ø–∞–ª–∏–≤–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (–∫–æ—á–µ–≥–∞—Ä). –ñ–∏—Ç–ª–æ–º —ñ
//           —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è–º –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –∑–∞ —Ç–µ–ª: (097)409-99-13
//         </p>

//         {reversedData.map((block, blockIndex) => (
//           <div key={blockIndex}>
//             {block.events.map((item: any) => {
//               const isExpanded = expanded[item.id];
//               const shouldTruncate =
//                 item.description && item.description.length > 200;
//               const currentIndex = carouselIndex[item.id] || 0;

//               return (
//                 <article key={item.id}>
//                   <h2 className={css.heading}>{item.title}</h2>
//                   <div className={css.card}>
//                     {item.type === "video" && (
//                       <div className={css.videoBlock}>
//                         <div className={css.videoWrapper}>
//                           <iframe
//                             src={`https://www.youtube.com/embed/${item.youtubeId}`}
//                             title={item.title}
//                             allow="autoplay; clipboard-write; encrypted-media; picture-in-picture"
//                             allowFullScreen
//                           />
//                         </div>
//                       </div>
//                     )}

//                     {item.type === "images" && (
//                       <div className={css.videoBlock}>
//                         <div className={css.carouselContainer}>
//                           <button
//                             className={`${css.carouselBtn} ${css.left}`}
//                             onClick={() =>
//                               handlePrev(item.id, item.images.length)
//                             }
//                           >
//                             <svg width="24" height="24" viewBox="0 0 24 24">
//                               <path
//                                 d="M15 18l-6-6 6-6"
//                                 stroke="currentColor"
//                                 strokeWidth="3"
//                                 fill="none"
//                                 strokeLinecap="round"
//                               />
//                             </svg>
//                           </button>

//                           <img
//                             src={item.images[currentIndex].thumb}
//                             alt={`–ü—Ä–µ–≤ º—é ${currentIndex + 1}`}
//                             className={css.thumbnail}
//                             onClick={() =>
//                               handleImageClick(item.images[currentIndex].full)
//                             }
//                           />

//                           <button
//                             className={`${css.carouselBtn} ${css.right}`}
//                             onClick={() =>
//                               handleNext(item.id, item.images.length)
//                             }
//                           >
//                             <svg width="24" height="24" viewBox="0 0 24 24">
//                               <path
//                                 d="M9 6l6 6-6 6"
//                                 stroke="currentColor"
//                                 strokeWidth="3"
//                                 fill="none"
//                                 strokeLinecap="round"
//                               />
//                             </svg>
//                           </button>
//                         </div>
//                       </div>
//                     )}

//                     <div className={css.descriptionWrapper}>
//                       <div
//                         className={`${css.description} ${
//                           isExpanded ? css.expanded : ""
//                         }`}
//                       >
//                         {item.description.split("\n").map((para: string, idx: number) => (
//                           <p key={idx}>{para}</p>
//                         ))}
//                       </div>

//                       {shouldTruncate && (
//                         <button
//                           onClick={() => toggleReadMore(item.id)}
//                           className={css.readMoreBtn}
//                         >
//                           {isExpanded ? "–ó–≥–æ—Ä–Ω—É—Ç–∏" : "–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ..."}
//                         </button>
//                       )}
//                     </div>
//                   </div>
//                 </article>
//               );
//             })}
//           </div>
//         ))}

//         {visibleCount < newsData.length && (
//           <button onClick={handleLoadMore} className={css.loadMore}>
//             –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
//           </button>
//         )}
//       </section>

//       {modalImage && (
//         <Modal onClose={closeModal}>
//           <img
//             src={modalImage}
//             alt="–ü–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
//             className={css.fullImage}
//           />
//         </Modal>
//       )}
//     </div>
//   );
// }


"use client";

import { useState } from "react";
import Image from "next/image";
import newsData from "@/data/news.json" assert { type: "json" };

import css from "./page.module.css";
import Modal from "@/components/Modal/Modal";
import Hero from "@/components/Hero/Hero";

type NewsItem = {
  id: number; // üëà –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
  title: string;
  type: "video" | "images";
  youtubeId?: string;
  description: string;
  images?: {
    thumb: string;
    full: string;
  }[];
};

type NewsBlock = {
  date: string; // üëà –¥–æ–¥–∞–Ω–æ
  events: NewsItem[];
};


export default function NewsPage() {
  const [visibleCount, setVisibleCount] = useState<number>(5);
  const [expanded, setExpanded] = useState<Record<string, boolean>>({});
  const [modalImage, setModalImage] = useState<string | null>(null);
const [carouselIndex, setCarouselIndex] = useState<Record<string, number>>({});

const typedNewsData = newsData as unknown as NewsBlock[];
const reversedData: NewsBlock[] = [...typedNewsData].reverse().slice(0, visibleCount);

const handleLoadMore = () => setVisibleCount((prev) => prev + 5);

  const toggleReadMore = (id: string) => {
    setExpanded((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  const handleImageClick = (src: string) => setModalImage(src);
  const closeModal = () => setModalImage(null);

  const handlePrev = (id: string, imagesLength: number) => {
    setCarouselIndex((prev) => ({
      ...prev,
      [id]: (prev[id] > 0 ? prev[id] : imagesLength) - 1,
    }));
  };

  const handleNext = (id: string, imagesLength: number) => {
    setCarouselIndex((prev) => ({
      ...prev,
      [id]: (prev[id] + 1 || 1) % imagesLength,
    }));
  };

  return (
    <div className="container">
      <section className={css.section}>
        <Hero />

        {/* --- –¢–µ–∫—Å—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å --- */}
        <p className={css.advertisement}>
          –°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É! –î–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∞–¥–æ, –Ω–∞—à—ñ –∑–∞—Ö–∏—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –≥–æ—Å—Ç—Ä—É
          –ø–æ—Ç—Ä–µ–±—É –≤ –∑–∞—Å–æ–±–∞—Ö –≥—ñ–≥—ñ—î–Ω–∏ (–≤–æ–ª–æ–≥—ñ —Å–µ—Ä–≤–µ—Ç–∫–∏, —Å—É—Ö–∏–π –¥—É—à —Ç–∞ —ñ–Ω.), –ø—Ä–æ—à—É
          –¥–æ–ª—É—á—ñ—Ç—å—Å—è –¥–æ –¥–æ–±—Ä–æ—ó —Å–ø—Ä–∞–≤–∏, –ø—Ä–∏–Ω–æ—Å—å—Ç–µ –¥–æ —Ü–µ—Ä–∫–≤–∏. –©–∏—Ä–æ –¥—è–∫—É—é –∑–∞ –≤–∞—à—É
          –¥–æ–ø–æ–º–æ–≥—É.
        </p>
        <p className={css.advertisement}>
          –î–æ—Ä–æ–≥—ñ –±—Ä–∞—Ç—Ç—è —ñ —Å–µ—Å—Ç—Ä–∏, –∑–±–∏—Ä–∞—î–º–æ –ø–æ–±—É—Ç–æ–≤—ñ –≥–∞–∑–æ–≤—ñ –±–∞–ª–æ–Ω–∏ –±/—É –¥–ª—è
          –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –æ–±—ñ–≥—Ä—ñ–≤–∞—á—ñ–≤ –Ω–∞ –¥—Ä–æ–≤–∞—Ö (–±—É—Ä–∂—É–π–æ–∫). –î–ª—è –Ω–∞—à–∏—Ö –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤.
        </p>
        <p className={css.advertisement}>
          –ù–µ –∑–∞–±—É–≤–∞–π–º–æ –ø—Ä–æ –Ω–∞—à–∏—Ö –º—É–∂–Ω—ñ—Ö –≤–æ—ó–Ω—ñ–≤, —è–∫—ñ –≤—ñ–¥–¥–∞—é—Ç—å –∑–∞ –Ω–∞—Å —Å–≤–æ—î –∂–∏—Ç—Ç—è.
          –ó–∞—Ä–∞–∑ —î –≥–æ—Å—Ç—Ä–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —É —Ä–µ—á–∞—Ö: –∫–æ–≤–¥—Ä–∏, –ø–æ–¥—É—à–∫–∏, –ø—Ä–æ—Å—Ç–∏–Ω—ñ,
          –ø—ñ–¥–æ–¥—ñ—è–ª—å–Ω–∏–∫–∏, —à–∫–∞—Ä–ø–µ—Ç–∫–∏, —Å–ø—ñ–¥–Ω—è –±—ñ–ª–∏–∑–Ω–∞ ‚Äî —É—Å–µ —á–∏—Å—Ç–µ. –ü—É–Ω–∫—Ç –∑–±–æ—Ä—É –≤–∏
          –∑–Ω–∞—î—Ç–µ. –ù–µ—Ö–∞–π –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç—å!
        </p>
        <p className={css.advertisement}>
          –ü–æ—Ç—Ä—ñ–±–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–≤–µ—Ä–¥–æ–ø–∞–ª–∏–≤–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (–∫–æ—á–µ–≥–∞—Ä). –ñ–∏—Ç–ª–æ–º —ñ
          —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è–º –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –∑–∞ —Ç–µ–ª: (097)409-99-13
        </p>

        {/* --- –ù–æ–≤–∏–Ω–∏ --- */}
        {reversedData.map((block, blockIndex) => (
          <div key={blockIndex}>
            {block.events.map((item) => {
              const isExpanded = expanded[item.id];
              const shouldTruncate =
                item.description && item.description.length > 200;
              const currentIndex = carouselIndex[item.id] || 0;

              return (
                <article key={item.id}>
                  <h2 className={css.heading}>{item.title}</h2>
                  <div className={css.card}>
                    {item.type === "video" && (
                      <div className={css.videoBlock}>
                        <div className={css.videoWrapper}>
                          <iframe
                            src={`https://www.youtube.com/embed/${item.youtubeId}`}
                            title={item.title}
                            allow="autoplay; clipboard-write; encrypted-media; picture-in-picture"
                            allowFullScreen
                          />
                        </div>
                      </div>
                    )}

                    {item.type === "images" && item.images && (
                      <div className={css.videoBlock}>
                        <div className={css.carouselContainer}>
                          <button
                            className={`${css.carouselBtn} ${css.left}`}
                            onClick={() =>
                              handlePrev(String(item.id), item.images!.length)
                            }
                          >
                            <svg width="24" height="24" viewBox="0 0 24 24">
                              <path
                                d="M15 18l-6-6 6-6"
                                stroke="currentColor"
                                strokeWidth="3"
                                fill="none"
                                strokeLinecap="round"
                              />
                            </svg>
                          </button>

                          <Image
                            src={item.images[currentIndex].thumb}
                            alt={`–ü—Ä–µ–≤ º—é ${currentIndex + 1}`}
                            width={400}
                            height={300}
                            className={css.thumbnail}
                            onClick={() =>
                              handleImageClick(item.images![currentIndex].full)
                            }
                          />

                          <button
                            className={`${css.carouselBtn} ${css.right}`}
                            onClick={() =>
                              handleNext(String(item.id), item.images!.length)
                            }
                          >
                            <svg width="24" height="24" viewBox="0 0 24 24">
                              <path
                                d="M9 6l6 6-6 6"
                                stroke="currentColor"
                                strokeWidth="3"
                                fill="none"
                                strokeLinecap="round"
                              />
                            </svg>
                          </button>
                        </div>
                      </div>
                    )}

                    <div className={css.descriptionWrapper}>
                      <div
                        className={`${css.description} ${
                          isExpanded ? css.expanded : ""
                        }`}
                      >
                        {item.description
                          .split("\n")
                          .map((para: string, idx: number) => (
                            <p key={idx}>{para}</p>
                          ))}
                      </div>

                      {shouldTruncate && (
                        <button
                          onClick={() => toggleReadMore(String(item.id))}
                          className={css.readMoreBtn}
                        >
                          {isExpanded ? "–ó–≥–æ—Ä–Ω—É—Ç–∏" : "–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ..."}
                        </button>
                      )}
                    </div>
                  </div>
                </article>
              );
            })}
          </div>
        ))}

        {visibleCount < newsData.length && (
          <button onClick={handleLoadMore} className={css.loadMore}>
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
          </button>
        )}
      </section>

      {modalImage && (
        <Modal onClose={closeModal}>
          <Image
            src={modalImage}
            alt="–ü–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
            width={800}
            height={600}
            className={css.fullImage}
          />
        </Modal>
      )}
    </div>
  );
}
